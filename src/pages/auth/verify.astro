---
import Layout from '../../layouts/Layout.astro'
---

<Layout title="not found">
    <main class="flex flex-col justify-center items-center h-screen bg-gray-950 text-white">
        <div class="box max-w-md">
            <div class="box__inner p-6">
                <div class="container-loader">
                    <div class="slice"></div>
                    <div class="slice"></div>
                    <div class="slice"></div>
                    <div class="slice"></div>
                    <div class="slice"></div>
                    <div class="slice"></div>
                </div>
                <label class="container-confirmed" style="display: none;">
                    <input checked="checked" type="checkbox">
                    <div class="checkmark"></div>
                </label>
                <div id="status" class="text-xl mt-4">
                    Verificando...
                </div>
            </div>
        </div>
    </main>
</Layout>

<script>
window.onload = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    console.log("Token ="+token);

    // Verifica si el token es nulo o está vacío
    if (!token) {
        document.getElementById('status').innerText = 'Token inválido';
        return;
    }

    try {
        // Asegúrate de reemplazar 'http://localhost:8080' con la URL de tu backend
        const response = await fetch(`https://srmacaback.fly.dev/auth/verify/${token}`);

        if (!response.ok) {
            const data = await response.json();
            throw new Error(data.error); // Aquí se accede al mensaje de error
        }

        const data = await response.json();
        // Ocultar loader
        const loader = document.querySelector('.container-loader') as HTMLElement;
        loader.style.display = 'none';

        // Mostrar confirmed
        const confirmed = document.querySelector('.container-confirmed') as HTMLElement;
        confirmed.style.display = 'block';

        const verificationStatus = data.message; // Aquí se accede al mensaje de éxito

        // Redirige al usuario a la página de inicio después de 5 segundos
        setTimeout(() => {
            window.location.href = '/';
        }, 5000);
        document.getElementById('status').innerText = verificationStatus;
    } catch (error) {
        console.error(error);
        document.getElementById('status').innerText = error.message; // Aquí se muestra el mensaje de error
    }
};
</script>

<!-- Box-and-Borders -->
<style>
    :root {
    --frame-border-size: 0.15rem;
    --frame-height: 2rem;
    --frame-width: 2rem;
    }
    .box {
        border: var(--frame-border-size) solid rgb(255, 255, 255);
        padding: var(--frame-height) var(--frame-width);
        height: 18rem;
        width: 50rem;
        max-width: 90%;
        position: relative;
        margin-top: 4rem;
    }
    .box__inner {
        height: 100%;
        width: 100%;
        background: rgba(184, 186, 187, 0.253);
    }
    .box::before {
        content: '';
        position: absolute;
        left: var(--frame-width);
        right: var(--frame-width);
        top: calc(-1 * var(--frame-border-size));
        bottom: calc(-1 * var(--frame-border-size));
        border-top: var(--frame-height) solid #030712;
        border-bottom: var(--frame-height) solid #030712;
    }
    .box::after {
        content: '';
        position: absolute;
        top: var(--frame-height);
        bottom: var(--frame-height);
        left: calc(-1 * var(--frame-border-size));
        right: calc(-1 * var(--frame-border-size));
        border-left: var(--frame-width) solid #030712;
        border-right: var(--frame-width) solid #030712;
    }
    @media (max-width: 600px) {
    .box {
    max-width: 100%;
    padding: 1rem;
    }

    .box__inner {
    padding: 1rem;
    }

    .box::before, 
    .box::after {
    border: none; 
    }
}
</style>

<!-- Container-Loader -->
<style>
    .container-loader {
        --uib-size: 45px;
        --uib-color: black;
        --uib-speed: 2.5s;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: var(--uib-size);
        width: var(--uib-size);
    }

    .slice {
        position: relative;
        height: calc(var(--uib-size) / 6);
        width: 100%;
    }

    .slice::before,
    .slice::after {
        --uib-a: calc(var(--uib-speed) / -2);
        --uib-b: calc(var(--uib-speed) / -6);
        content: '';
        position: absolute;
        top: 0;
        left: calc(50% - var(--uib-size) / 12);
        height: 100%;
        width: calc(100% / 6);
        border-radius: 50%;
        background-color: var(--uib-color);
        flex-shrink: 0;
        animation: orbit var(--uib-speed) linear infinite;
        transition: background-color 0.3s ease;
    }

    .slice:nth-child(1)::after {
        animation-delay: var(--uib-a);
    }

    .slice:nth-child(2)::before {
        animation-delay: var(--uib-b);
    }

    .slice:nth-child(2)::after {
        animation-delay: calc(var(--uib-a) + var(--uib-b));
    }
    .slice:nth-child(3)::before {
      animation-delay: calc(var(--uib-b) * 2);
    }
    .slice:nth-child(3)::after {
      animation-delay: calc(var(--uib-a) + var(--uib-b) * 2);
    }

    .slice:nth-child(4)::before {
      animation-delay: calc(var(--uib-b) * 3);
    }
    .slice:nth-child(4)::after {
      animation-delay: calc(var(--uib-a) + var(--uib-b) * 3);
    }

    .slice:nth-child(5)::before {
      animation-delay: calc(var(--uib-b) * 4);
    }
    .slice:nth-child(5)::after {
      animation-delay: calc(var(--uib-a) + var(--uib-b) * 4);
    }
  
    .slice:nth-child(6)::before {
      animation-delay: calc(var(--uib-b) * 5);
    }
    .slice:nth-child(6)::after {
      animation-delay: calc(var(--uib-a) + var(--uib-b) * 5);
    }

@keyframes orbit {
    0% {
        transform: translateX(calc(var(--uib-size) * 0.25)) scale(0.73684);
        opacity: 0.65;
    }
    5% {
        transform: translateX(calc(var(--uib-size) * 0.235)) scale(0.684208);
        opacity: 0.58;
    }
    10% {
        transform: translateX(calc(var(--uib-size) * 0.182)) scale(0.631576);
        opacity: 0.51;
    }
    15% {
        transform: translateX(calc(var(--uib-size) * 0.129)) scale(0.578944);
        opacity: 0.44;
    }
    20% {
        transform: translateX(calc(var(--uib-size) * 0.076)) scale(0.526312);
        opacity: 0.37;
    }
    25% {
        transform: translateX(0%) scale(0.47368);
        opacity: 0.3;
    }
    30% {
        transform: translateX(calc(var(--uib-size) * -0.076)) scale(0.526312);
        opacity: 0.37;
    }
    35% {
        transform: translateX(calc(var(--uib-size) * -0.129)) scale(0.578944);
        opacity: 0.44;
    }
    40% {
        transform: translateX(calc(var(--uib-size) * -0.182)) scale(0.631576);
        opacity: 0.51;
    }
    45% {
        transform: translateX(calc(var(--uib-size) * -0.235)) scale(0.684208);
        opacity: 0.58;
    }
    50% {
        transform: translateX(calc(var(--uib-size) * -0.25)) scale(0.73684);
        opacity: 0.65;
    }
    55% {
        transform: translateX(calc(var(--uib-size) * -0.235)) scale(0.789472);
        opacity: 0.72;
    }
    60% {
        transform: translateX(calc(var(--uib-size) * -0.182)) scale(0.842104);
        opacity: 0.79;
    }
    65% {
        transform: translateX(calc(var(--uib-size) * -0.129)) scale(0.894736);
        opacity: 0.86;
    }
    70% {
        transform: translateX(calc(var(--uib-size) * -0.076)) scale(0.947368);
        opacity: 0.93;
    }
    75% {
        transform: translateX(0%) scale(1);
        opacity: 1;
    }
    80% {
        transform: translateX(calc(var(--uib-size) * 0.076)) scale(0.947368);
        opacity: 0.93;
    }
    85% {
        transform: translateX(calc(var(--uib-size) * 0.129)) scale(0.894736);
        opacity: 0.86;
    }
    90% {
        transform: translateX(calc(var(--uib-size) * 0.182)) scale(0.842104);
        opacity: 0.79;
    }
    95% {
        transform: translateX(calc(var(--uib-size) * 0.235)) scale(0.789472);
        opacity: 0.72;
    }
    100% {
        transform: translateX(calc(var(--uib-size) * 0.25)) scale(0.73684);
        opacity: 0.65;
    }
}
</style>

<!-- Container-Confirmed -->
<style>
        /* Hide the default checkbox */
    .container-confirmed input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    .hidden{
        display: none;
    }

    .container-confirmed {
        transition: opacity 0.5s ease;
        display: block;
        position: relative;
        cursor: pointer;
        font-size: 25px;
        user-select: none;
    }

    /* Create a custom checkbox */
    .checkmark {
        position: relative;
        top: 0;
        left: 0;
        height: 1.3em;
        width: 1.3em;
        background: black;
        border-radius: 50px;
        transition: all 0.7s;
        --spread: 20px;
    }

    /* When the checkbox is checked, add a blue background */
    .container-confirmed input:checked ~ .checkmark {
        background: black;
        box-shadow: -10px -10px var(--spread) 0px #5B51D8, 0 -10px var(--spread) 0px #833AB4, 10px -10px var(--spread) 0px #E1306C, 10px 0 var(--spread) 0px #FD1D1D, 10px 10px var(--spread) 0px #F77737, 0 10px var(--spread) 0px #FCAF45, -10px 10px var(--spread) 0px #FFDC80;
    }

    /* Create the checkmark/indicator (hidden when not checked) */
    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    /* Show the checkmark when checked */
    .container-confirmed input:checked ~ .checkmark:after {
        display: block;
    }

    /* Style the checkmark/indicator */
    .container-confirmed .checkmark:after {
        left: 0.45em;
        top: 0.25em;
        width: 0.25em;
        height: 0.5em;
        border: solid #f0f0f0;
        border-width: 0 0.15em 0.15em 0;
        transform: rotate(45deg);
    }
</style>